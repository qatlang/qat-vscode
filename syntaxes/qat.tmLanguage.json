{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "qat",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#semantics"
    },
    {
      "include": "#constantsAndSpecialValues"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.qat",
          "match": "\\b(if|else|loop|while|break|switch|case|continue|over|let|multithread|collect|give|from|variadic|end|part|say|var|lib|bring|of|in|copy|move|alias|expose|box|operator)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator",
          "match": "(([+\\-]{1,2}|[\\*\\/%^~!])|([<]{1,2}|[>]{1,3})|([|&]{1,2}))(=)?"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.comma.qat",
          "match": ","
        },
        {
          "name": "punctuation.terminator.qat",
          "match": "."
        },
        {
          "name": "punctuation.dot.qat",
          "match": "'"
        },
        {
          "name": "punctuation.dot.qat",
          "match": "\\:"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.interpolated.double.qat",
          "begin": "(?<!\\|r)\"",
          "end": "\"",
          "patterns": [
            {
              "name": "invalid.string.newline",
              "match": "\\n"
            },
            {
              "include": "#stringInterpolation"
            }
          ]
        },
        {
          "name": "string.quoted.double.qat",
          "begin": "r\"",
          "end": "\"",
          "patterns": [
            {
              "name": "invalid.string.newline",
              "match": "\\n"
            }
          ]
        }
      ]
    },
    "qatDocumentation": {
      "patterns": [
        {
          "match": "(\\[.*?\\])",
          "captures": {
            "0": {
              "name": "variable.name.source.qat"
            }
          }
        },
        {
          "match": "^ {4,}(?![ \\*]).*",
          "captures": {
            "0": {
              "name": "variable.name.source.qat"
            }
          }
        },
        {
          "contentName": "variable.other.source.qat",
          "begin": "```.*?$",
          "end": "```"
        },
        {
          "match": "(`.*?`)",
          "captures": {
            "0": {
              "name": "variable.other.source.qat"
            }
          }
        },
        {
          "match": "(`.*?`)",
          "captures": {
            "0": {
              "name": "variable.other.source.qat"
            }
          }
        },
        {
          "match": "(\\* ((    ).*))$",
          "captures": {
            "2": {
              "name": "variable.other.source.qat"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.empty.qat",
          "match": "/\\*\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.qat"
            }
          }
        },
        {
          "include": "#commentsStarDocumentation"
        },
        {
          "include": "#commentsSlashDocumentation"
        },
        {
          "include": "#commentsInline"
        }
      ]
    },
    "commentsStarDocumentation": {
      "patterns": [
        {
          "name": "comment.block.documentation.qat",
          "begin": "/\\*\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#commentsStarDocumentation"
            },
            {
              "include": "#commentsBlock"
            },
            {
              "include": "#qatDocumentation"
            }
          ]
        }
      ]
    },
    "commentsSlashDocumentation": {
      "patterns": [
        {
          "name": "comment.block.documentation.qat",
          "begin": "///",
          "while": "^\\s*///",
          "patterns": [
            {
              "include": "#qatDocumentation"
            }
          ]
        }
      ]
    },
    "commentsInline": {
      "patterns": [
        {
          "include": "#commentsBlock"
        },
        {
          "match": "((//).*)$",
          "captures": {
            "1": {
              "name": "comment.line.double-slash.qat"
            }
          }
        }
      ]
    },
    "commentsBlock": {
      "patterns": [
        {
          "name": "comment.block.qat",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#commentsBlock"
            }
          ]
        }
      ]
    },
    "semantics": {
      "patterns": [
        { "include": "#visibilityValue" },
        { "include": "#functionDeclaration" },
        { "include": "#typeDeclaration" },
        { "include": "#primitiveTypes" },
        { "include": "#toConversion" },
        { "include": "#declaration" },
        { "include": "#memberEntity" },
        { "include": "#plainInitialiser" }
      ]
    },
    "constantsAndSpecialValues": {
      "patterns": [
        {
          "name": "constant.language.qat",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "variable.language.qat",
          "match": "\\b('')\\b"
        },
        {
          "name": "constant.numeric.qat",
          "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
        },
        {
          "name": "constant.numeric.qat",
          "match": "\\b([0-9]+)(_([u|i][0-9]*))?\\b",
          "captures": {
            "1": { "name": "constant.number.qat" },
            "3": { "name": "storage.type.primitive.qat" }
          }
        }
      ]
    },
    "primitiveTypes": {
      "patterns": [
        {
          "match": "\\b(((i|u){1}[1-9][0-9]*)|f32|f64|f80|f128|f128ppc|fbrain|fhalf|void|str|cstring|@)\\b",
          "captures": { "1": { "name": "storage.type.primitive.qat" } }
        }
      ]
    },
    "typeIdentifier": {
      "patterns": [
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)[ ]*[,]?[ ]*)*)(>))?\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.qat"
            }
          }
        }
      ]
    },
    "visibilityValue": {
      "patterns": [
        {
          "match": "(pub)(\\'(box|file|folder|type|lib))?\\b",
          "captures": {
            "1": { "name": "keyword.control.less.qat" },
            "2": { "name": "keyword.control.less.qat" }
          }
        }
      ]
    },
    "functionDeclaration": {
      "patterns": [
        {
          "match": "(<~)?[ ]*([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)([ ]*[,]?)*[ ]*)*)(>))?[ ]*->[ ]*(([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)[ ]*[,]?[ ]*)*)(>))?\\b)[ ]*",
          "captures": {
            "2": {
              "name": "entity.name.function.qat"
            },
            "5": {
              "name": "entity.name.type.qat"
            },
            "10": {
              "name": "entity.name.type.qat"
            }
          }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)([ ]*[,]?)*[ ]*)*)(>))?\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.qat"
            },
            "4": {
              "name": "entity.name.type.qat"
            }
          }
        },
        {
          "match": "''([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)([ ]*[,]?)*[ ]*)*)(>))?\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.qat"
            },
            "4": {
              "name": "entity.name.type.qat"
            }
          }
        },
        {
          "match": "'([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)([ ]*[,]?)*[ ]*)*)(>))?\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.qat"
            },
            "4": {
              "name": "entity.name.type.qat"
            }
          }
        }
      ]
    },
    "typeDeclaration": {
      "patterns": [
        {
          "match": "(type)[ ]+([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)[ ]*[,]?[ ]*)*)(>))?[ ]*",
          "patterns": [{ "include": "#typeIdentifier" }],
          "captures": {
            "1": { "name": "keyword.control.qat" },
            "2": {
              "name": "entity.name.type.qat"
            },
            "5": {
              "name": "entity.name.type.qat"
            }
          }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)([ ]*[,]?)*[ ]*)*)(>))?\\{",
          "captures": {
            "1": {
              "name": "entity.name.type.qat"
            },
            "4": {
              "name": "entity.name.type.qat"
            }
          }
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "match": "((var)[ ]+)?([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)[ ]*[,]?[ ]*)*)(>))?[ ]* [a-zA-Z_][a-zA-Z0-9_]*",
          "captures": {
            "3": {
              "name": "entity.name.type.qat"
            }
          }
        }
      ]
    },
    "typeParameters": {
      "begin": "(:<)",
      "end": "(>)",
      "beginCaptures": {
        "1": {
          "name": "other.source.qat"
        }
      },
      "endCaptures": {
        "1": {
          "name": "other.source.qat"
        }
      },
      "patterns": [
        {
          "include": "#typeIdentifier",
          "captures": {
            "1": { "name": "storage.type.primitive.qat" }
          }
        },
        { "match": "[\\s,]+" }
      ]
    },
    "memberEntity": {
      "patterns": [
        {
          "match": "''([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": { "1": { "name": "entity.name.tag.type" } }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)[ ]*:=",
          "captures": { "1": { "name": "entity.name.tag.type" } }
        },
        {
          "match": "'([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": { "1": { "name": "entity.name.tag.type" } }
        }
      ]
    },
    "plainInitialiser": {
      "patterns": [
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)[ ]*{",
          "captures": { "1": { "name": "entity.name.type.qat" } }
        }
      ]
    },
    "toConversion": {
      "patterns": [
        {
          "match": "(to)[ ]+([a-zA-Z_][a-zA-Z0-9_]*)[ ]*((:<)([ ]*(([a-zA-Z_][a-zA-Z0-9_]*)[ ]*[,]?[ ]*)*)(>))?[ ]*",
          "captures": {
            "1": { "name": "keyword.control.qat" },
            "2": { "name": "entity.name.type.qat" },
            "5": { "name": "entity.name.type.qat" }
          }
        }
      ]
    }
  },
  "scopeName": "source.qat"
}

